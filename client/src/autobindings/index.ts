// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.5.0 (commit 0712d3bfbd159367de09efeeeacb54c9d4f0ff61).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { BuyCrew } from "./buy_crew_reducer.ts";
export { BuyCrew };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { MoveCrew } from "./move_crew_reducer.ts";
export { MoveCrew };
import { RefreshShop } from "./refresh_shop_reducer.ts";
export { RefreshShop };
import { RegisterPlayer } from "./register_player_reducer.ts";
export { RegisterPlayer };
import { StartBattle } from "./start_battle_reducer.ts";
export { StartBattle };

// Import and reexport all table handle types
import { BattleTableHandle } from "./battle_table.ts";
export { BattleTableHandle };
import { CrewTableHandle } from "./crew_table.ts";
export { CrewTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { ShopCrewTableHandle } from "./shop_crew_table.ts";
export { ShopCrewTableHandle };

// Import and reexport all types
import { Battle } from "./battle_type.ts";
export { Battle };
import { BattleStatus } from "./battle_status_type.ts";
export { BattleStatus };
import { Crew } from "./crew_type.ts";
export { Crew };
import { CrewRarity } from "./crew_rarity_type.ts";
export { CrewRarity };
import { CrewTrait } from "./crew_trait_type.ts";
export { CrewTrait };
import { Player } from "./player_type.ts";
export { Player };
import { ShipType } from "./ship_type_type.ts";
export { ShipType };
import { ShopCrew } from "./shop_crew_type.ts";
export { ShopCrew };

const REMOTE_MODULE = {
  tables: {
    battle: {
      tableName: "battle",
      rowType: Battle.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Battle.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    crew: {
      tableName: "crew",
      rowType: Crew.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Crew.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: (Player.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    shop_crew: {
      tableName: "shop_crew",
      rowType: ShopCrew.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (ShopCrew.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    buy_crew: {
      reducerName: "buy_crew",
      argsType: BuyCrew.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    client_disconnected: {
      reducerName: "client_disconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    move_crew: {
      reducerName: "move_crew",
      argsType: MoveCrew.getTypeScriptAlgebraicType(),
    },
    refresh_shop: {
      reducerName: "refresh_shop",
      argsType: RefreshShop.getTypeScriptAlgebraicType(),
    },
    register_player: {
      reducerName: "register_player",
      argsType: RegisterPlayer.getTypeScriptAlgebraicType(),
    },
    start_battle: {
      reducerName: "start_battle",
      argsType: StartBattle.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.5.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "BuyCrew", args: BuyCrew }
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "MoveCrew", args: MoveCrew }
| { name: "RefreshShop", args: RefreshShop }
| { name: "RegisterPlayer", args: RegisterPlayer }
| { name: "StartBattle", args: StartBattle }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  buyCrew(shopCrewId: bigint, slotIndex: number | undefined) {
    const __args = { shopCrewId, slotIndex };
    let __writer = new __BinaryWriter(1024);
    BuyCrew.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("buy_crew", __argsBuffer, this.setCallReducerFlags.buyCrewFlags);
  }

  onBuyCrew(callback: (ctx: ReducerEventContext, shopCrewId: bigint, slotIndex: number | undefined) => void) {
    this.connection.onReducer("buy_crew", callback);
  }

  removeOnBuyCrew(callback: (ctx: ReducerEventContext, shopCrewId: bigint, slotIndex: number | undefined) => void) {
    this.connection.offReducer("buy_crew", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_disconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_disconnected", callback);
  }

  moveCrew(crewId: bigint, newSlot: number | undefined) {
    const __args = { crewId, newSlot };
    let __writer = new __BinaryWriter(1024);
    MoveCrew.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_crew", __argsBuffer, this.setCallReducerFlags.moveCrewFlags);
  }

  onMoveCrew(callback: (ctx: ReducerEventContext, crewId: bigint, newSlot: number | undefined) => void) {
    this.connection.onReducer("move_crew", callback);
  }

  removeOnMoveCrew(callback: (ctx: ReducerEventContext, crewId: bigint, newSlot: number | undefined) => void) {
    this.connection.offReducer("move_crew", callback);
  }

  refreshShop() {
    this.connection.callReducer("refresh_shop", new Uint8Array(0), this.setCallReducerFlags.refreshShopFlags);
  }

  onRefreshShop(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("refresh_shop", callback);
  }

  removeOnRefreshShop(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("refresh_shop", callback);
  }

  registerPlayer(name: string) {
    const __args = { name };
    let __writer = new __BinaryWriter(1024);
    RegisterPlayer.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("register_player", __argsBuffer, this.setCallReducerFlags.registerPlayerFlags);
  }

  onRegisterPlayer(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("register_player", callback);
  }

  removeOnRegisterPlayer(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("register_player", callback);
  }

  startBattle() {
    this.connection.callReducer("start_battle", new Uint8Array(0), this.setCallReducerFlags.startBattleFlags);
  }

  onStartBattle(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("start_battle", callback);
  }

  removeOnStartBattle(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("start_battle", callback);
  }

}

export class SetReducerFlags {
  buyCrewFlags: __CallReducerFlags = 'FullUpdate';
  buyCrew(flags: __CallReducerFlags) {
    this.buyCrewFlags = flags;
  }

  moveCrewFlags: __CallReducerFlags = 'FullUpdate';
  moveCrew(flags: __CallReducerFlags) {
    this.moveCrewFlags = flags;
  }

  refreshShopFlags: __CallReducerFlags = 'FullUpdate';
  refreshShop(flags: __CallReducerFlags) {
    this.refreshShopFlags = flags;
  }

  registerPlayerFlags: __CallReducerFlags = 'FullUpdate';
  registerPlayer(flags: __CallReducerFlags) {
    this.registerPlayerFlags = flags;
  }

  startBattleFlags: __CallReducerFlags = 'FullUpdate';
  startBattle(flags: __CallReducerFlags) {
    this.startBattleFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get battle(): BattleTableHandle {
    // clientCache is a private property
    return new BattleTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Battle>(REMOTE_MODULE.tables.battle));
  }

  get crew(): CrewTableHandle {
    // clientCache is a private property
    return new CrewTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Crew>(REMOTE_MODULE.tables.crew));
  }

  get player(): PlayerTableHandle {
    // clientCache is a private property
    return new PlayerTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get shopCrew(): ShopCrewTableHandle {
    // clientCache is a private property
    return new ShopCrewTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<ShopCrew>(REMOTE_MODULE.tables.shop_crew));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
